\begin{thebibliography}{10}
\providecommand{\url}[1]{\texttt{#1}}
\providecommand{\urlprefix}{URL }
\providecommand{\doi}[1]{https://doi.org/#1}

\bibitem{Abbott2004-va}
Abbott, M., Altenkirch, T., Ghani, N.: Representing nested inductive types
  using {W}-types. In: Automata, Languages and Programming, pp. 59--71. Lecture
  notes in computer science, Springer Berlin Heidelberg, Berlin, Heidelberg
  (2004), \url{https://link.springer.com/chapter/10.1007/978-3-540-27836-8_8}

\bibitem{Abel2013-fq}
Abel, A.: Normalization by evaluation: Dependent types and impredicativity.
  Ph.D. thesis, \url{https://www2.tcs.ifi.lmu.de/~abel/talkHabil2013.pdf}

\bibitem{Adamek2010-ls}
Adamek, J., Rosicky, J., Vitale, E.M.: Cambridge tracts in mathematics:
  Algebraic theories: A categorical introduction to general algebra series
  number 184. Cambridge University Press, Cambridge, England (18~Nov 2010),
  \url{https://www.cambridge.org/academic/subjects/mathematics/logic-categories-and-sets/algebraic-theories-categorical-introduction-general-algebra?format=HB&isbn=9780521119221}

\bibitem{Allais2023-pf}
Allais, G.: Builtin types viewed as inductive families. In: Programming
  Languages and Systems. pp. 113--139. Springer Nature Switzerland (2023),
  \url{http://dx.doi.org/10.1007/978-3-031-30044-8_5}

\bibitem{Allais2023-zq}
Allais, G.: Seamless, correct, and generic programming over serialised data.
  arXiv [cs.PL]  (20~Oct 2023), \url{http://arxiv.org/abs/2310.13441}

\bibitem{Allais2023-rg}
Allais, G., Brady, E., Corbyn, N., Kammar, O., Yallop, J.: Frex:
  dependently-typed algebraic simplification. arXiv.org  (2023),
  \url{http://dx.doi.org/10.48550/ARXIV.2306.15375}

\bibitem{Altenkirch2016-zc}
Altenkirch, T., Kaposi, A.: Type theory in type theory using quotient inductive
  types. In: Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on
  Principles of Programming Languages. pp. 18--29. POPL '16, Association for
  Computing Machinery, New York, NY, USA (11~Jan 2016),
  \url{https://doi.org/10.1145/2837614.2837638}

\bibitem{Atkey2018-pj}
Atkey, R.: Syntax and semantics of quantitative type theory. In: Proceedings of
  the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science. pp. 56--65.
  LICS '18, Association for Computing Machinery, New York, NY, USA (9~Jul
  2018), \url{https://doi.org/10.1145/3209108.3209189}

\bibitem{Atkey2011-ex}
Atkey, R., Johann, P., Ghani, N.: When is a type refinement an inductive type?
  In: Foundations of Software Science and Computational Structures, pp. 72--87.
  Lecture notes in computer science, Springer Berlin Heidelberg, Berlin,
  Heidelberg (2011), \url{https://bentnib.org/inductive-refinement.pdf}

\bibitem{Baudon2023-cy}
Baudon, T., Radanne, G., Gonnord, L.: Bit-stealing made legal: Compilation for
  custom memory representations of algebraic data types. Proc. ACM Program.
  Lang.  \textbf{7}(ICFP),  813--846 (31~Aug 2023),
  \url{https://doi.org/10.1145/3607858}

\bibitem{Boulier2017-cm}
Boulier, S., P\'{e}drot, P.M., Tabareau, N.: The next 700 syntactical models of
  type theory. In: Proceedings of the 6th ACM SIGPLAN Conference on Certified
  Programs and Proofs. pp. 182--194. CPP 2017, Association for Computing
  Machinery, New York, NY, USA (16~Jan 2017),
  \url{https://doi.org/10.1145/3018610.3018620}

\bibitem{Brady2004-ay}
Brady, E., McBride, C., McKinna, J.: Inductive families need not store their
  indices. In: Types for Proofs and Programs. pp. 115--129. Springer Berlin
  Heidelberg (2004), \url{http://dx.doi.org/10.1007/978-3-540-24849-1_8}

\bibitem{Castellan2019-qo}
Castellan, S., Clairambault, P., Dybjer, P.: Categories with families:
  Unityped, simply typed, and dependently typed. arXiv [cs.LO]  (1~Apr 2019),
  \url{http://arxiv.org/abs/1904.00827}

\bibitem{Cockx2018-bv}
Cockx, J., Devriese, D.: Proof-relevant unification: Dependent pattern matching
  with only the axioms of your type theory. J. Funct. Prog.  \textbf{28}(e12),
  ~e12 (Jan 2018),
  \url{https://www.cambridge.org/core/services/aop-cambridge-core/content/view/E54D56DC3F5D5361CCDECA824030C38E/S095679681800014Xa.pdf/div-class-title-proof-relevant-unification-dependent-pattern-matching-with-only-the-axioms-of-your-type-theory-div.pdf}

\bibitem{Dagand2012-aw}
Dagand, P.E., McBride, C.: A categorical treatment of ornaments. In: 2013 28th
  Annual ACM/IEEE Symposium on Logic in Computer Science. IEEE (Jun 2013),
  \url{http://dx.doi.org/10.5555/2591370.2591396}

\bibitem{Diehl2018-ba}
Diehl, L., Firsov, D., Stump, A.: Generic zero-cost reuse for dependent types.
  Proc. ACM Program. Lang.  \textbf{2}(ICFP),  1--30 (30~Jul 2018),
  \url{https://doi.org/10.1145/3236799}

\bibitem{Goguen2006-sy}
Goguen, H., McBride, C., McKinna, J.: Eliminating dependent pattern matching.
  In: Algebra, Meaning, and Computation, pp. 521--540. Lecture notes in
  computer science, Springer Berlin Heidelberg, Berlin, Heidelberg (2006),
  \url{https://research.google.com/pubs/archive/99.pdf}

\bibitem{Gratzer2020-kf}
Gratzer, D., Kavvos, G.A., Nuyts, A., Birkedal, L.: Multimodal dependent type
  theory. In: Proceedings of the 35th Annual ACM/IEEE Symposium on Logic in
  Computer Science. ACM, New York, NY, USA (8~Jul 2020),
  \url{http://dx.doi.org/10.1145/3373718.3394736}

\bibitem{Kovacs2022-vb}
Kov\'{a}cs, A.: Staged compilation with two-level type theory. Proc. ACM
  Program. Lang.  \textbf{6}(ICFP),  540--569 (29~Aug 2022),
  \url{https://dl.acm.org/doi/10.1145/3547641}

\bibitem{Kovacs2023-gq}
Kov\'{a}cs, A.: Type-theoretic signatures for algebraic theories and inductive
  types. Ph.D. thesis (2023),
  \url{https://andraskovacs.github.io/pdfs/phdthesis_compact.pdf}

\bibitem{Martin-Lof1984-pz}
Martin-L{\"{o}}f, P.: Intuitionistic type theory  \textbf{1},  1--91 (1984),
  \url{https://intuitionistic.wordpress.com/wp-content/uploads/2010/07/martin-lof-tt.pdf}

\bibitem{McBride2006-fp}
McBride, C., Goguen, H., McKinna, J.: A few constructions on constructors. In:
  Lecture Notes in Computer Science, pp. 186--200. Lecture notes in computer
  science, Springer Berlin Heidelberg, Berlin, Heidelberg (2006),
  \url{http://www.e-pig.org/downloads/concon.pdf}

\bibitem{Mcbride2004-fd}
Mcbride, C., Mckinna, J.: The view from the left. J. Funct. Programming
  \textbf{14}(1),  69--111 (Jan 2004),
  \url{https://www.cambridge.org/core/services/aop-cambridge-core/content/view/F8A44CAC27CCA178AF69DD84BC585A2D/S0956796803004829a.pdf/div-class-title-the-view-from-the-left-div.pdf}

\bibitem{Moon2021-eb}
Moon, B., Eades, III, H., Orchard, D.: Graded modal dependent type theory. In:
  Programming Languages and Systems. pp. 462--490. Springer International
  Publishing (2021), \url{http://dx.doi.org/10.1007/978-3-030-72019-3_17}

\bibitem{Wadler1987-zp}
Wadler, P.: Views: a way for pattern matching to cohabit with data abstraction.
  In: Proceedings of the 14th ACM SIGACT-SIGPLAN symposium on Principles of
  programming languages. pp. 307--313. POPL '87, Association for Computing
  Machinery, New York, NY, USA (1~Oct 1987),
  \url{https://doi.org/10.1145/41625.41653}

\bibitem{Wadler1990-yo}
Wadler, P.: Deforestation: transforming programs to eliminate trees. Theor.
  Comput. Sci.  \textbf{73}(2),  231--248 (1~Jun 1990),
  \url{https://www.sciencedirect.com/science/article/pii/030439759090147A}

\bibitem{agda}
{The Agda Wiki}. \url{https://wiki.portal.chalmers.se/agda/pmwiki.php},
  accessed: 2024-5-3

\bibitem{gmp}
{The GNU MP Bignum Library}. \url{https://gmplib.org/}, accessed: 2024-12-8

\bibitem{idris}
{Idris: A Language for Type-Driven Development}.
  \url{https://www.idris-lang.org/}, accessed: 2024-5-3

\bibitem{lean}
{Lean: Programming Language and Theorem Prover}. \url{https://lean-lang.org/},
  accessed: 2024-5-3

\bibitem{rocq}
{Welcome to a World of Rocq}. \url{https://rocq-prover.org/}, accessed:
  2025-4-16

\bibitem{agda-extraction}
{agda2hs Documentation — agda2hs documentation}.
  \url{https://agda.github.io/agda2hs/}, accessed: 2025-2-19

\bibitem{agda-issue}
{Should Agda optimise away the erasure from Vec to List?. Issue \#7701}.
  \url{https://github.com/idris-lang/Idris2/pull/3486}, accessed: 2025-2-19

\bibitem{coq-extraction}
{Program extraction — Coq 8.13.2 documentation}.
  \url{https://coq.inria.fr/doc/v8.13/refman/addendum/extraction.html},
  accessed: 2025-2-19

\bibitem{idris-extraction}
{Pragmas — Idris2 0.0 documentation}.
  \url{https://idris2.readthedocs.io/en/latest/reference/pragmas.html#transform},
  accessed: 2025-2-19

\bibitem{idris-pr}
{Make `CONS', `NIL', `JUST' and `NOTHING' constructors have uniform names by
  Z-snails. Pull Request \#3486}.
  \url{https://github.com/idris-lang/Idris2/pull/3486}, accessed: 2025-2-19

\end{thebibliography}
