record Repr (A : Uind) where
  R : Uobj
  c : A[^R] -> Gen ^R
  i : ^R -> Gen A(^R)


instance (ra : Repr A, rb : Repr B) => Repr (^ra.R -> ^rb.R) where
  R = ra.R -> rb.R

  c : (^ra.A -> ^ra.B) -> Gen ^(ra.R -> rb.R)
  c f = return <\x -> ~(f(<x>))>

  i : ^(ra.A -> ra.B) -> Gen (^ra.R -> ^rb.R)
  i f = return (\x -> <f(~x)>)


instance (ra : Repr A, rb : Repr B) => Repr (^ra.R ** ^rb.R) where
  R = (ra.R ** rb.R)

  c : (^ra.A ** ^ra.B) -> Gen ^(ra.R ** rb.R)
  c x = return <(~(x.0), ~(x.1))>

  i : ^(ra.A -> ra.B) -> Gen (^ra.R -> ^rb.R)
  c x = return (<(~x).0>, <(~x).1>)




data List T = nil | cons T (List T)

instance (rt : Repr T) => Repr (List (^rt.R)) where
  R = Array rt.R

  c : (List ^rt.R)[Array rt.R] -> Gen ^(Array rt.R)

  i : ^(Array rt.R) -> Gen (List rt.R)(^(Array rt.R))
